'use strict'
const Kamaji = require('../index')
const faker = require('faker')
const assert = require('assert')
const fs = require('fs')
const co = require('co')
let kamaji
describe('KamajiSDK', function () {
    describe('Kamji connection succesfuly', function () {
        before((done) => {
            this.timeout(5000);
            /** Create a new Rectangle object before every test.*/
            kamaji = new Kamaji({
                appKey: '371938510281732901030',
                appSecret: 'ko29l276ussi39ajw29jd92ja0jkd023j49js93jw9xjs',
                host: 'http://private-d5032-kamajirest1.apiary-mock.com',
                key: fs.readFileSync('./test/keys/client-key.pem'),
                cert: fs.readFileSync('./test/keys/client-cert.pem'),
                ca: [fs.readFileSync('./test/keys/server-cert.pem')],
                requestCert: true,
                rejectUnauthorized: true
            })
            kamaji.connect().then(function () {
                done()
            }).catch((err) => {
                done(err)
            })
        })
        it('Api request succesfuly', (done) => {
            this.timeout(5000)
            kamaji.api('/customers', 'get').then(function () {
                done()
            }).catch((err) => {
                done(err)
            })
        })
        it('Api request fail', (done) => {
            this.timeout(5000)
            kamaji.api('/not_found_url', 'get').then((res) => {
                done(res)
            }).catch(function () {
                done()
            })
        })
    })
    describe('Group customer', function () {
        it('Create a customer and remove it', (done) => {
            this.timeout(5000)
            co(function* () {
                var customer = new kamaji.Customer()
                    /**The promise is resolved with the customer self*/
                var res = yield(
                        /** the answer of customer.set().save() is the customer self*/
                        /**if lean is false, default value is false. */
                        yield customer.set({
                            firstname: faker.name.firstName(),
                            lastname: faker.name.lastName(),
                            email: faker.internet.email()
                                /**  With this the after methods can be chained */
                        }).save()).remove({
                        lean: true
                    })
                    /**the methods remove return undefined*/
                assert(typeof res === 'undefined')
            }).then(function () {
                done()
            })
        })
        it('Update a customer', (done) => {
            this.timeout(5000)
            var customer = new kamaji.Customer()
            customer.set({
                _id: faker.random.uuid()
            }).save().then(function (res) {
                assert(res._id)
                assert(res.email)
                done()
            }).catch(function () {
                done()
            })
        })
        it('Get all customers', (done) => {
            this.timeout(5000)
            var customer = new kamaji.Customer()
            customer.fetch().then(function (res) {
                assert(Array.isArray(res))
                done()
            }).catch(function () {
                done()
            })
        })
        it('Get a customer', (done) => {
            this.timeout(5000)
            var customer = new kamaji.Customer()
            customer.fetch({
                _id: faker.random.uuid()
            }).then(function (res) {
                assert(res._id)
                assert(res.email)
                done()
            }).catch(function () {
                done()
            })
        })
    })
    describe('Group Products', function () {
        it('Get all products', (done) => {
            this.timeout(5000)
            var product = new kamaji.Product()
            product.fetch().then(function (res) {
                assert(Array.isArray(res))
                done()
            }).catch(function () {
                done()
            })
        })
        it('Get a product', (done) => {
            this.timeout(5000)
            var product = new kamaji.Product({
                _id: faker.random.uuid()
            })
            product.fetch().then(function (res) {
                assert(res._id)
                assert(res.title)
                done()
            }).catch(function () {
                done()
            })
        })
        it('Get filtered products by template (list)', (done) => {
            this.timeout(6000)
            var product = new kamaji.Product({})
            product.fetch({
                query: {
                    template: faker.lorem.words(2).join(' '),
                }
            }).then(function (res) {
                assert(res._id)
                assert(res.title)
                done()
            }).catch(function () {
                done()
            })
        })
    })
    describe('Group Cards', function () {
        it('Create an card', (done) => {
            this.timeout(5000)
            var card = new kamaji.Card()
            card.set({}).save().then(function (res) {
                assert(res._id)
                done()
            }).catch(function () {
                done()
            })
        })
        it('Update an card', (done) => {
            this.timeout(5000)
            var card = new kamaji.Card()
            card.set({
                _id: faker.random.uuid()
            }).save().then(function (res) {
                assert(res._id)
                done()
            }).catch(function () {
                done()
            })
        })
        it('Get all cards', (done) => {
            this.timeout(5000)
            var card = new kamaji.Card()
            card.fetch({
                _id: faker.random.uuid()
            }).then(function (res) {
                assert(res._id)
                done()
            }).catch(function () {
                done()
            })
        })
        it('Get a card', (done) => {
            this.timeout(5000)
            var card = new kamaji.Card()
            card.set({
                _id: faker.random.uuid()
            }).fetch().then(function (res) {
                assert(res._id)
                done()
            }).catch(function () {
                done()
            })
        })
    })
    describe('Group Orders', function () {
        it('Create an order', (done) => {
            this.timeout(5000)
            var order = new kamaji.Order()
            order.set({}).save().then(function (res) {
                assert(res._id)
                done()
            }).catch(function () {
                done()
            })
        })
        it('Update an order', (done) => {
            this.timeout(5000)
            var order = new kamaji.Order()
            order.set({
                _id: faker.random.uuid()
            }).save().then(function (res) {
                assert(res._id)
                done()
            }).catch(function () {
                done()
            })
        })
        it('Get all orders', (done) => {
            this.timeout(5000)
            var order = new kamaji.Order()
            order.fetch({
                _id: faker.random.uuid()
            }).then(function (res) {
                assert(res._id)
                done()
            }).catch(function () {
                done()
            })
        })
        it('Get an order', (done) => {
            this.timeout(5000)
            var order = new kamaji.Order()
            order.set({
                _id: faker.random.uuid()
            }).fetch().then(function (res) {
                assert(res._id)
                done()
            }).catch(function () {
                done()
            })
        })
    })
    describe('Group Payments', function () {
        it('Create an payment', (done) => {
            this.timeout(5000)
            var payment = new kamaji.Payment()
            payment.set({}).save().then(function (res) {
                assert(res._id)
                done()
            }).catch(function () {
                done()
            })
        })
        it('Update an payment', (done) => {
            this.timeout(5000)
            var payment = new kamaji.Payment()
            payment.set({
                _id: faker.random.uuid()
            }).save().then(function (res) {
                assert(res._id)
                done()
            }).catch(function () {
                done()
            })
        })
        it('Get all payments', (done) => {
            this.timeout(5000)
            var payment = new kamaji.Payment()
            payment.fetch({
                _id: faker.random.uuid()
            }).then(function (res) {
                assert(res._id)
                done()
            }).catch(function () {
                done()
            })
        })
        it('Get a payment', (done) => {
            this.timeout(5000)
            var payment = new kamaji.Payment()
            payment.set({
                _id: faker.random.uuid()
            }).fetch().then(function (res) {
                assert(res._id)
                done()
            }).catch(function () {
                done()
            })
        })
    })
    describe('Group Logs', function () {
        it('Create a log', (done) => {
            this.timeout(7000)
            var payment = new kamaji.Log()
            payment.set({}).save().then(function (res) {
                assert(res._id)
                done()
            }).catch(function () {
                done()
            })
        })
    })
})