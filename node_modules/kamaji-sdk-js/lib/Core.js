'use strict';
const request = require('request');
const _debug = require('debug');
// Debugs
//
let debug = {
    req: _debug('kamaji-sdk-js:req'),
    done: _debug('kamaji-sdk-js:done'),
    fail: _debug('kamaji-sdk-js:fail')
};
/**
 * @typedef {Object} _requestOptions
 * @property {Buffer} key - Buffer of key
 * @property {Buffer} cert - Buffer of key
 * @property {String} host - Host url
 * @property {Object} auth
 * @property {String} auth.token - Access token for request
 */
var _requestOptions = {
        key: '',
        cert: '',
        ca: [],
        host: 'http://private-d5032-kamajirest1.apiary-mock.com',
        auth: {}
    },
    isConnected = false;
/**
 * Defines the basic methods for applications to Kamaji facilitating the
 * authentication method and respecting the guidelines of Kamaji REST API
 * @class Core
 */
class Core {
    /**
     * @constructor
     * @param {Object} prop - properties init
     */
    constructor(prop) {
            this._properties = {}
            if (prop) {
                this.set(prop)
            }
            // Private attributes
            this._request = request;
            this._path = '';
            this._requestOptions = _requestOptions
        }
        /**
         * Sets object settings for request
         * @memberof Core
         * @private
         * @param {Object} settings - Object
         * @param {Buffer} settings.key - Buffer of key
         * @param {Buffer} settings.cert - Buffer of key
         * @param {Buffer} settings.ca - Buffer of ca
         * @param {String} settings.host - Host url
         */
    _setSettings(settings) {
            settings = typeof settings === 'undefined' ? {} : settings;
            return {
                key: settings.key,
                cert: settings.cert,
                ca: settings.host.ca,
                host: settings.host
            };
        }
        /**
         * Sets the properties to this._properties (private)
         * @memberof Core
         * @instance
         * @param {Object} properties - Object
         * @example
         * // Set properties
         *  instaceCore.set({property1: 1, property2:2});
         * // Set _id for get specific object, update (save) or remove
         *  instaceCore.set({_id: 1});
         */
    set(properties) {
            properties = properties || {}
            if (properties._id) {
                this._id = properties._id;
                this._properties = properties;
                return this;
            } else {
                for (var prop in properties) {
                    if (properties.hasOwnProperty(prop)) {
                        this._properties[prop] = properties[prop];
                    }
                }
            }
            return this;
        }
        /**
         * Reset private properties
         * @memberof Core
         * @instance
         * @example
         * // Reset
         *  instaceCore.reset
         * // Reset and set again
         *  instaceCore.reset.set({});
         */
    get reset() {
            if (this._id) {
                delete this._id
            }
            this._properties = {}
            return this;
        }
        /**
         * Retutrns the property by key
         * @memberof Core
         * @instance
         * @param {String} key - Name of property
         * @example
         * // Return specific property
         *   instaceCore.get('property1');
         * // Return all properties
         *   instaceCore.get();
         */
    get get() {
            return this._properties;
        }
        /**
         * Sends a post or put and check login
         * @memberof Core
         * @instance
         * @param {Object} opt - Options
         * @param {Boolean} opt.checkLogin - Login before request
         * @param {Boolean} opt.lean - Returns Json or this
         * @example
         * // Save a new objet
         *  instaceCore.set({}).save()
         *    .then((object)=>{}).catch((err)=>{});
         * @example
         * // Update a existing objet
         *  instaceCore.set({_id: '1234'}).save()
         *    .then((object)=>{}).catch((err)=>{});
         */
    save(opt) {
            opt = opt ? opt : {
                checkLogin: true,
                lean: false
            }
            var checkLogin = opt.checkLogin ? opt.checkLogin : true
            var lean = opt.lean ? opt.lean : false
            if (checkLogin && !Core.isConnected) {
                return this.tokenRequest(() => {
                    return this._save(lean);
                });
            } else {
                return this._save(lean);
            }
        }
        /**
         * Checks if exists _id and sends put or post and assign the new porperties
         * to instance
         * @memberof Core
         * @private
         * @param {Boolean} lean - Returns Json or this
         */
    _save(lean) {
            let method = this._id ? 'put' : 'post',
                path = this._id ? this._path + '/' + this._id : this._path;
            return new Promise((resolve, reject) => {
                this.api(path, method, this._properties).then((res) => {
                    if (res && typeof res === 'object') {
                        this.set(res);
                    }
                    if (!lean) {
                        resolve(this);
                    } else {
                        resolve(res);
                        return res;
                    }
                }).catch(function (err) {
                    return reject(err);
                });
            });
        }
        /**
         * Check if exist _id in properties and send a get:id or get and check login
         * @memberof Core
         * @instance
         * @param {Object} opt - Options
         * @param {Boolean} opt.lean - Returns Json or this
         * @param {Object} opt.query - Query
         * @example
         * // GET all objects
         * instaceCore.fetch()
         *  .then((objects)=>{}).catch((err)=>{});
         */
    fetch(opt) {
            opt = typeof opt === 'object' ? opt : {}
            if (!Core.isConnected) {
                return this.tokenRequest(() => {
                    return this._fetch(opt.lean, opt.query);
                });
            } else {
                return this._fetch(opt.lean, opt.query);
            }
        }
        /**
         * Sends a request to fetch (get)  if this._id exist send a requesr like
         * resource/:id
         * @memberof Core
         * @instance
         * @param {Boolean} lean - Returns Json or this
         * @param {Object} query - Query
         */
    _fetch(lean, query) {
            let path = this._id ? this._path + '/' + this._id : this._path;
            return new Promise((resolve, reject) => {
                this.api(path, 'get', this._properties, query).then((res) => {
                    if (res && typeof res === 'object') {
                        this.set(res);
                    }
                    if (!lean) {
                        resolve(this);
                        return this;
                    } else {
                        resolve(res);
                        return res;
                    }
                }).catch(function (err) {
                    return reject(err);
                });
            });
        }
        /**
         * Sends a request to delete method and check login
         * @memberof Core
         * @instance
         * @param {Object} opt - Options
         * @param {Boolean} opt.checkLogin - Login before request
         * @param {Boolean} opt.lean - Returns Json or this
         * @example
         * // Remove with defaults
         *  instaceCore.remove()
         * // Remove with custom
         *  instaceCore.remove({lean: true, checkLogin: true});
         */
    remove(opt) {
            opt = opt ? opt : {
                checkLogin: true,
                lean: false
            }
            var checkLogin = opt.checkLogin ? opt.checkLogin : true
            var lean = opt.lean ? opt.lean : false
            if (checkLogin && !Core.isConnected) {
                return this.tokenRequest(() => {
                    return this._remove(lean);
                });
            } else {
                return this._remove(lean);
            }
        }
        /**
         * Sends a request to delete method
         * @memberof Core
         * @instance
         * @param {Boolean} lean - Returns Json or this
         */
    _remove(lean) {
            return new Promise((resolve, reject) => {
                this.api(this._path + '/' + this._id, 'delete').then((res) => {
                    this.reset
                    if (!lean) {
                        resolve(this);
                        return this;
                    } else {
                        resolve(res);
                        return res;
                    }
                }).catch(function (err) {
                    return reject(err);
                });
            });
        }
        /**
         * Sends a request
         * @memberof Core
         * @instance
         * @param {String} url - Url path
         * @param {String} method - Http method
         * @param {Object} data - Data to send
         * @param {Object} qs - http query
         * @param {Boolean} sec - Check security (token)
         * @example
         * // Request for a custom method
         * instaceCore.api('my_custom_method', 'post', {})
         *   .then((response)=>{}).catch((err)=>{});
         */
    api(url, method, data, qs, sec) {
            sec = typeof sec === 'undefined' ? true : sec;
            let options = Core.requestOptions,
                toSend = {
                    method: method,
                    uri: options.host + url,
                    json: data || true,
                    cert: options.cert,
                    key: options.key,
                    ca: options.ca
                };
            if (qs) {
                toSend.qs = qs
            }
            if (sec) {
                toSend.headers = {
                    Authorization: 'Bearer ' + options.auth.token
                };
            }
            // Debug request excluding cert, key & ca
            //
            debug.req(JSON.stringify({
                method: toSend.method,
                uri: toSend.uri,
                json: toSend.json,
                headers: toSend.headers
            }));
            // Promisify the requests
            //
            return new Promise(function (resolve, reject) {
                request(toSend, (error, response, body) => {
                    if (error || (response.statusCode !== 201 && response.statusCode !== 200 && response.statusCode !== 204)) {
                        debug.fail(JSON.stringify(error || body));
                        return reject(error || body);
                    }
                    debug.done(JSON.stringify(body));
                    return resolve(body);
                });
            });
        }
        /**
         * Sends a request for a Valid token
         * @memberof Auth
         * @property {Function} cb - Callback after success
         * @example
         * // Request for a token
         *  instaceCore.tokenRequest();
         */
    tokenRequest(cb) {
            let self = this;
            // Promisify the requests for assgn token
            //
            return new Promise(function (resolve, reject) {
                self.api('/auth', 'post', {
                    appKey: Core.requestOptions.appKey,
                    appSecret: Core.requestOptions.appSecret
                }, null, false).then((res) => {
                    Core.requestOptions.auth = res;
                    Core.isConnected = true;
                    if (typeof cb === 'function') {
                        // The callback return a promise and the resolve values is used
                        // to resolve the primise of tokenRequest
                        cb().then(function (res) {
                            resolve(res)
                        });
                    }
                    resolve(res);
                }).catch((err) => {
                    reject(err);
                });
            });
        }
        /**
         * Returns settings for http request
         * @memberof Core
         * @static
         * @returns {_requestOptions} - Options to request
         */
    static get requestOptions() {
            return _requestOptions;
        }
        /**
         * Sets the settings for http request
         * @memberof Core
         * @static
         * @property {_requestOptions} requestOptions - Options to request
         */
    static set requestOptions(requestOptions) {
            _requestOptions = requestOptions;
        }
        /**
         * Sets if client is connected
         * @memberof Core
         * @static
         * @property {Boolean} connected - If is connected
         */
    static set isConnected(connected) {
            isConnected = connected;
        }
        /**
         * Get if client is connected
         * @memberof Core
         * @static
         * @returns {Boolean} - If is connected
         */
    static get isConnected() {
        return isConnected;
    }
}
module.exports = Core;